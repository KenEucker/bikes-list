Holidays

I'd like to add support for storing holidays in an SQL table, and using
that to add icons to the weekly grid at the tops of calendars -- especially
the Pedalpalooza calendar, but it'd be nice for the monthly and rolling
3-week views too.

Each holiday should have:

* A "dates" string saying when it occurs.
* An icon image (required!)
* A title, used as the tooltip for the icon.
* An optional link to a web page (usually external) for the holiday.

---------------------------------------------------------------------------
DATES

Dates would be stored as a string, parsed similarly to how the repeatdates()
function as event dates.  However, some changes are needed.

First, it must support years.  The rules for parsing years are:
	* a year must be given as four digits, such as "2012".
	* a year should be given only as the last word in a clause
	* A LATER VERSION may detect when a year is used at the start of
	  a clause, and switch to an alternative syntax in which the year
	  should only be given as the first word.

Second, instead of generating a list of days starting today, it should
instead generate a list of days between two dates.  The dates are optional,
and default to starting=today and ending=one year from today.

When any calendar view is generating a weekly grid, it should figure out
the first and last dates of that grid, and then scan through the list of
holidays passing the those dates (and the holdiay's own "dates" field)
to repeatdates().  If the returned list is empty, then the holiday can
be ignored; else the returned list could be used t

A repeatholidays() function could implement this.  Given a 

---------------------------------------------------------------------------
TABLES

The calevents table has all of these fields.  I could stick the holidays
in that table with eventstatus="H".  They wouldn't need any caldaily fields.
The advantage here is that it would use the same "image" directory for
storing event images.

Alternatively, I could create a separate table just for holidays.  That
would probably be the safer way to go.  We'd need a separate "holicons"
directory.

	CREATE TABLE calholiday (
		modified TIMESTAMP,	when the record was added/modified
		holid INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
		title varchar(40),	name of the holiday
		dates varchar(255),	string of the dates
		url   varchar(255),	what it links to, or "" if no link
		image varchar(255)	name of icon within "holicons" directory
	)

A new function in the "include/common.php" file would scan the calholiday
table for 

----------------------------------------------------------------------------
PHP CODE

This belongs in the include/repeat.php file.

A new repeatholiday($timestamp) is the sole public interface to this
functionality.  The first time it is called for a given page, it scans
through the calholiday table and parses the dates.  This information
is stored in a private variable, to accellerate the next call.

repeatholiday() then checks the given date against all holidays, and
returns an array of matching calholiday records.  Often this will
be an empty array.

The $timestamp parameter is a time_t value, as returned by the strtotime()
function.

$repeatholist = NULL;

function repeatholiday($timestamp, $sqlconn)
{
    global $repeatholist;

    # first time, load the table and parse each record's "dates" field
    if ($repeatholist == NULL) {
	# start with an empty table
	repeatholist = array();

	# fetch the entire list of holidays
	$result = mysql_query("SELECT * FROM calholidays", $sqlconn) or die(mysql_error());

	# for each holiday...
	while ($h = mysql_fetch_array($result)) {
	    # parse its 'dates' field
	    $tokens = datetokens($h['dates']);
	    $tokens = datealso($tokens);
	    $rules = daterules($tokens);

	    # add an element to the $repeatholist array
	    $h['rules'] = $rules;
	    $repeatholist[] = $h;
	}
    }

    # return a list of holidays matching $timestamp
    $match = array();
    foreach ($repeatholist as $h) {
	if (dateinstance($h['rules'], $timestamp)
	    $match[] = $h;
    return $match;
}
